name: Deploy CloudFormation Stack and HTML

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - server-and-workflow-deployment
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        options:
          - create
          - delete

env:
  AWS_REGION: us-east-1
  STACK_NAME: AIHealthServerCloudFormationStack
  INSTANCE_ID: MyEC2Instance
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Set SSH private key as an environment variable

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate CloudFormation template
      run: aws cloudformation validate-template --template-body file://server-deployment/server.yaml

    - name: Check if CloudFormation stack exists
      id: stack-check
      run: |
        STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].StackName" --output text 2>/dev/null || true)
        echo "stack_exists=$STACK_EXISTS" >> $GITHUB_ENV  
        
    - name: Create CloudFormation stack
      if: ${{ env.stack_exists == '' && env.ACTION == 'create' }}
      run: |
        aws cloudformation create-stack \
          --stack-name ${{ env.STACK_NAME }} \
          --template-body server-deployment/server.yaml \
          --parameters \
            ParameterKey=InstanceType,ParameterValue=t2.micro \
            ParameterKey=KeyName,ParameterValue=AiHealth \
            ParameterKey=AMI,ParameterValue=${{ secrets.AMI }} \
            ParameterKey=DBUsername,ParameterValue=${{ secrets.DBUsername }} \
            ParameterKey=DBPassword,ParameterValue=${{ secrets.DBPassword }} \
            ParameterKey=DBAllocatedStorage,ParameterValue=20 \
            ParameterKey=DBInstanceClass,ParameterValue=db.t3.micro \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Update CloudFormation stack
      if: ${{ env.stack_exists != '' && env.ACTION == 'create' }}
      run: |
        aws cloudformation update-stack \
          --stack-name ${{ env.STACK_NAME }} \
          --template-body server-deployment/server.yaml \
          --parameters \
            ParameterKey=InstanceType,ParameterValue=t2.micro \
            ParameterKey=KeyName,ParameterValue=AiHealth \
            ParameterKey=AMI,ParameterValue=${{ secrets.AMI }} \
            ParameterKey=DBUsername,ParameterValue=${{ secrets.DBUsername }} \
            ParameterKey=DBPassword,ParameterValue=${{ secrets.DBPassword }} \
            ParameterKey=DBAllocatedStorage,ParameterValue=20 \
            ParameterKey=DBInstanceClass,ParameterValue=db.t3.micro \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Get EC2 instance public IP
      if: ${{ env.ACTION == 'create' }}
      id: ec2-public-ip
      run: |
        INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" --output text)
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Prepare SSH for rsync
      if: ${{ env.ACTION == 'create' }}
      run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.ec2-public-ip.outputs.public_ip }} >> ~/.ssh/known_hosts
  
    - name: Test SSH Connection
      if: ${{ env.ACTION == 'create' }}
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ steps.ec2-public-ip.outputs.public_ip }} "echo 'SSH connection successful'"

    - name: Transfer files to EC2
      if: ${{ env.ACTION == 'create' }}
      run: |
        rsync -avz -e "ssh -i ~/.ssh/id_rsa" --exclude='.github' . ec2-user@${{ steps.ec2-public-ip.outputs.public_ip }}:/home/ec2-user/ --rsync-path="mkdir -p /home/ec2-user/ && rsync"

    - name: SSH and deploy HTML files
      if: ${{ env.ACTION == 'create' }}
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ steps.ec2-public-ip.outputs.public_ip }}
        username: ec2-user
        key: ${{ env.SSH_PRIVATE_KEY }}
        script: |
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
  
            # Install Python
            sudo yum install -y python3
            
            # Install pip if not already installed
            sudo yum install -y python3-pip
  
            # Create a directory for your application if it doesn't exist
            mkdir -p /home/ec2-user/app
            
            # Move files and folders
            sudo mv /home/ec2-user/* /var/www/html/  
            sudo mv /home/ec2-user/chatbot/* /home/ec2-user/app/
  
            # Install required Python packages
            pip3 install -r /home/ec2-user/app/requirements.txt

            # (Optional) Restart HTTP server if needed
            sudo systemctl restart httpd

            nohup python3 -m streamlit run /home/ec2-user/app/chatbot/main.py --server.port 8501 > streamlit.log 2>&1 &
