name: Deploy CloudFormation Stack and HTML

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - server-and-workflow-deployment
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  
  STACK_NAME: AIHealthServerCloudFormationStack
  INSTANCE_ID: MyEC2Instance
  ACTION: create

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate CloudFormation template
      run: aws cloudformation validate-template --template-body file://server-deployment/server.yaml

    - name: Deploy CloudFormation stack
      if: ${{ env.ACTION == 'create' }}
      run: |
        aws cloudformation deploy \
          --template-file server-deployment/server.yaml \
          --stack-name ${{ env.STACK_NAME }} \
          --parameter-overrides \
            InstanceType=t2.micro \
            KeyName=AiHealth \
            AMI=${{ secrets.AMI }} \
            DBUsername=${{ secrets.DBUsername }} \
            DBPassword=${{ secrets.DBPassword }} \
            DBAllocatedStorage=20 \
            DBInstanceClass=db.t3.micro \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Delete CloudFormation stack
      if: ${{ env.ACTION == 'delete' }}
      run: |
        aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}

    - name: Get EC2 instance public IP
      if: ${{ env.ACTION == 'create' }}
      id: ec2-public-ip
      run: |
        INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" --output text)
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        echo "public_ip=${PUBLIC_IP}" >> $GITHUB_ENV

    - name: Wait for EC2 instance to be ready
      if: ${{ env.ACTION == 'create' }}
      run: |
          INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" --output text)
          echo "Waiting for EC2 instance to become healthy..."
          while true; do
            # Check instance state
            STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            
            # Check health checks
            INSTANCE_HEALTH=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
            SYSTEM_HEALTH=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
  
            if [ "$STATUS" == "running" ] && [ "$INSTANCE_HEALTH" == "ok" ] && [ "$SYSTEM_HEALTH" == "ok" ]; then
              echo "EC2 instance is running and healthy."
              break
            else
              echo "Instance state: $STATUS, Instance health: $INSTANCE_HEALTH, System health: $SYSTEM_HEALTH. Waiting..."
              sleep 30
            fi
          done

    - name: Prepare SSH for rsync
      if: ${{ env.ACTION == 'create' }}
      run: |
        mkdir -p ~/.ssh
        echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        ssh-keyscan -H ${{ env.public_ip }} >> ~/.ssh/known_hosts

    - name: Transfer files to EC2
      if: ${{ env.ACTION == 'create' }}
      run: |
        rsync -avz --exclude='.github' . ec2-user@${{ env.public_ip }}:/home/ec2-user/ --rsync-path="mkdir -p /home/ec2-user/ && rsync"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: SSH and deploy HTML files
      if: ${{ env.ACTION == 'create' }}
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ env.public_ip }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |            
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
  
            # Install Python
            sudo yum install -y python3
            
            # Install pip if not already installed
            sudo yum install -y python3-pip
  
            # Create a directory for your application if it doesn't exist
            mkdir -p /home/ec2-user/app
            
            # Move files and folders
            sudo mv /home/ec2-user/* /var/www/html/  
            sudo mv /home/ec2-user/chatbot/* /home/ec2-user/app/
  
            # Install required Python packages
            pip3 install -r /home/ec2-user/app/requirements.txt

            # (Optional) Restart HTTP server if needed
            sudo systemctl restart httpd

            nohup python3 -m streamlit run /home/ec2-user/app/chatbot/main.py --server.port 8501 > streamlit.log 2>&1 &
